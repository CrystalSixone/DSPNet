# ------------------------------------------------------------------------------
# Copyright (c) Microsoft
# Licensed under the MIT License.
# Written by Bin Xiao (Bin.Xiao@microsoft.com)
# ------------------------------------------------------------------------------

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

from yacs.config import CfgNode as CN

EFFICIENT_NET = CN()
EFFICIENT_NET.NETTYPE = 'efficientnet-b0'
EFFICIENT_NET.DECONV_WITH_BIAS = False
EFFICIENT_NET.NUM_DECONV_LAYERS = 3
EFFICIENT_NET.NUM_DECONV_FILTERS = [256, 256, 256]
EFFICIENT_NET.NUM_DECONV_KERNELS = [4, 4, 4]
EFFICIENT_NET.FINAL_CONV_KERNEL = 1
EFFICIENT_NET.PRETRAINED_LAYERS = ['*']
# pose_resnet related params写在这儿是防止没有yaml吗
POSE_RESNET = CN()
POSE_RESNET.NUM_LAYERS = 50
POSE_RESNET.DECONV_WITH_BIAS = False
POSE_RESNET.NUM_DECONV_LAYERS = 3
POSE_RESNET.NUM_DECONV_FILTERS = [256, 256, 256]
POSE_RESNET.NUM_DECONV_KERNELS = [4, 4, 4]
POSE_RESNET.FINAL_CONV_KERNEL = 1
POSE_RESNET.PRETRAINED_LAYERS = ['*']

# pose_resnet related params
MULTI_RESNET = CN()
MULTI_RESNET.NUM_LAYERS = 50
MULTI_RESNET.DECONV_WITH_BIAS = False
MULTI_RESNET.LOSS_TYPE = 'sum_loss'
MULTI_RESNET.FINAL_CONV_KERNEL = 1
MULTI_RESNET.PRETRAINED_LAYERS = ['*']

MULTI_RESNET.STAGE2 = CN()
MULTI_RESNET.STAGE2.NUM_DECONV_LAYERS = 1
MULTI_RESNET.STAGE2.NUM_DECONV_FILTERS = [256]
MULTI_RESNET.STAGE2.NUM_DECONV_KERNELS = [4]

MULTI_RESNET.STAGE3 = CN()
MULTI_RESNET.STAGE3.NUM_DECONV_LAYERS = 2
MULTI_RESNET.STAGE3.NUM_DECONV_FILTERS = [256,256]
MULTI_RESNET.STAGE3.NUM_DECONV_KERNELS = [4],4

MULTI_RESNET.STAGE4 = CN()
MULTI_RESNET.STAGE4.NUM_DECONV_LAYERS = 3
MULTI_RESNET.STAGE4.NUM_DECONV_FILTERS = [256,256,256]
MULTI_RESNET.STAGE4.NUM_DECONV_KERNELS = [4,4,4]

# pose_resnet related params
POSE_RES2NET = CN()
POSE_RES2NET.NUM_LAYERS = 50
POSE_RES2NET.DECONV_WITH_BIAS = False
POSE_RES2NET.LOSS_TYPE = 'zhongji_loss'
POSE_RES2NET.FINAL_CONV_KERNEL = 1
POSE_RES2NET.PRETRAINED_LAYERS = ['*']

POSE_RES2NET.STAGE2 = CN()
POSE_RES2NET.STAGE2.NUM_DECONV_LAYERS = 1
POSE_RES2NET.STAGE2.NUM_DECONV_FILTERS = [256]
POSE_RES2NET.STAGE2.NUM_DECONV_KERNELS = [4]

POSE_RES2NET.STAGE3 = CN()
POSE_RES2NET.STAGE3.NUM_DECONV_LAYERS = 2
POSE_RES2NET.STAGE3.NUM_DECONV_FILTERS = [256,256]
POSE_RES2NET.STAGE3.NUM_DECONV_KERNELS = [4],4

POSE_RES2NET.STAGE4 = CN()
POSE_RES2NET.STAGE4.NUM_DECONV_LAYERS = 3
POSE_RES2NET.STAGE4.NUM_DECONV_FILTERS = [256,256,256]
POSE_RES2NET.STAGE4.NUM_DECONV_KERNELS = [4,4,4]


#不知道有没有作用：有

INCEP_HRNET = CN()
INCEP_HRNET.PRETRAINED_LAYERS = ['*']
INCEP_HRNET.FINAL_CONV_KERNEL = 1

INCEP_HRNET.STAGE2 = CN()
INCEP_HRNET.STAGE2.CUR_STAGE = 2
INCEP_HRNET.STAGE2.MULTI_SCALE_OUTPUT = True
INCEP_HRNET.STAGE2.ORINGINAL_CHANNELS = 32
INCEP_HRNET.STAGE2.NUM_BLOCKS = [4,4]
INCEP_HRNET.STAGE2.BLOCK = 'BASIC'

INCEP_HRNET.STAGE3 = CN()
INCEP_HRNET.STAGE3.CUR_STAGE = 3
INCEP_HRNET.STAGE3.MULTI_SCALE_OUTPUT = True
INCEP_HRNET.STAGE3.ORINGINAL_CHANNELS = 32
INCEP_HRNET.STAGE3.NUM_BLOCKS = [8,8]
INCEP_HRNET.STAGE3.BLOCK = 'BASIC'

INCEP_HRNET.STAGE4 = CN()
INCEP_HRNET.STAGE4.CUR_STAGE = 4
INCEP_HRNET.STAGE4.MULTI_SCALE_OUTPUT = False
INCEP_HRNET.STAGE4.ORINGINAL_CHANNELS = 32
INCEP_HRNET.STAGE4.NUM_BLOCKS = [6,6]
INCEP_HRNET.STAGE4.BLOCK = 'BASIC'

# pose_multi_resoluton_net related params
POSE_HIGH_RESOLUTION_NET = CN()
POSE_HIGH_RESOLUTION_NET.PRETRAINED_LAYERS = ['*']
POSE_HIGH_RESOLUTION_NET.STEM_INPLANES = 64
POSE_HIGH_RESOLUTION_NET.FINAL_CONV_KERNEL = 1

POSE_HIGH_RESOLUTION_NET.STAGE2 = CN()
POSE_HIGH_RESOLUTION_NET.STAGE2.NUM_MODULES = 1
POSE_HIGH_RESOLUTION_NET.STAGE2.NUM_BRANCHES = 2
POSE_HIGH_RESOLUTION_NET.STAGE2.NUM_BLOCKS = [4, 4]
POSE_HIGH_RESOLUTION_NET.STAGE2.NUM_CHANNELS = [32, 64]
POSE_HIGH_RESOLUTION_NET.STAGE2.BLOCK = 'BASIC'
POSE_HIGH_RESOLUTION_NET.STAGE2.FUSE_METHOD = 'SUM'

POSE_HIGH_RESOLUTION_NET.STAGE3 = CN()
POSE_HIGH_RESOLUTION_NET.STAGE3.NUM_MODULES = 1
POSE_HIGH_RESOLUTION_NET.STAGE3.NUM_BRANCHES = 3
POSE_HIGH_RESOLUTION_NET.STAGE3.NUM_BLOCKS = [4, 4, 4]
POSE_HIGH_RESOLUTION_NET.STAGE3.NUM_CHANNELS = [32, 64, 128]
POSE_HIGH_RESOLUTION_NET.STAGE3.BLOCK = 'BASIC'
POSE_HIGH_RESOLUTION_NET.STAGE3.FUSE_METHOD = 'SUM'

POSE_HIGH_RESOLUTION_NET.STAGE4 = CN()
POSE_HIGH_RESOLUTION_NET.STAGE4.NUM_MODULES = 1
POSE_HIGH_RESOLUTION_NET.STAGE4.NUM_BRANCHES = 4
POSE_HIGH_RESOLUTION_NET.STAGE4.NUM_BLOCKS = [4, 4, 4, 4]
POSE_HIGH_RESOLUTION_NET.STAGE4.NUM_CHANNELS = [32, 64, 128, 256]
POSE_HIGH_RESOLUTION_NET.STAGE4.BLOCK = 'BASIC'
POSE_HIGH_RESOLUTION_NET.STAGE4.FUSE_METHOD = 'SUM'


MODEL_EXTRAS = {
    'pose_resnet': POSE_RESNET,
    'pose_res2net': POSE_RES2NET,
    'pose_high_resolution_net': POSE_HIGH_RESOLUTION_NET,
    'incep_hrnet': INCEP_HRNET,
    'multi_resnet': MULTI_RESNET,
    'efficientnet':EFFICIENT_NET,
}
